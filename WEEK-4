Q-1:
#include<stdio.h>
void merge(int [],int,int,int*,int*);
void merge_sort(int [],int,int,int*,int*);
void disp(int [],int);
int main()
{
    int t,n,i;
    printf("Enter the number of test cases:");
    scanf("%d",&t);
    while(t>0)
    {
        t--;
        printf("Enter size:");
        scanf("%d",&n);
        int arr[n],inv=0,cmp=0;
        printf("Enter elements:");
        for(i=0;i<n;i++)
        scanf("%d",&arr[i]);
        merge_sort(arr,0,n-1,&cmp,&inv);
        printf("Comparisons:%d\n",cmp);
        printf("Inversions:%d\n",inv);
        printf("Sorted Array:");
        disp(arr,n);
    }
    return 0;
}
void merge(int arr[],int l,int m,int h,int *cmp,int *inv)
{
    int l1,l2,i;
    int b[h];
    for(l1=l,l2=m+1;i=l;l1<=m && l2<=h;i++)
    {
        (*cmp)++;
        if(arr[l1]<=arr[l2])
        b[i]=arr[l1++];
        else
        {
            b[i]=arr[l2++];
            (*inv)+=(m-l1+1);
        }
    }
    while(l1<=m)
    {
        b[i++]=arr[l1++];
    }
    while(l2<=h)
    {
        b[i++]=arr[l2++];
    }
    for(i=1;i<=h;i++)
    {
        arr[i]=b[i];
    }
}
void merge_sort(int arr[],int l,int h,int *cmp,int *inv)
{
    if(l<=h)
    {
        int m=(l+h)/2;
        merge_sort(arr,l,m,cmp,inv);
        merge_sort(arr,m+1,h,cmp,inv);
        merge(arr,l,m,h,cmp,inv);
    }
}
void disp(int arr[],int n)
{
    int i;
    for(i=0;i<n;i++)
    printf("%d",arr[i]);
    printf("\n");
}

INPUT:
Enter total number of test cases:3
Enter size:8
Enter elements:23 65 21 76 46 89 45 32
Enter size:10
Enter elements:54 65 34 76 78 97 46 32 51 21
Enter size:15
Enter elements:63 42 223 645 652 31 324 22 553 12 54 65 86 46 325

OUTPUT:
Comparisons:16
Inversions:13
Array after sorting:21 23 32 45 46 65 76 89
Comparisons:22
Inversions:28
Array after sorting:21 32 34 46 51 54 65 76 78 97
Comparisons:43
Inversions:54
Array after sorting:12 22 31 42 46 54 63 65 86 223 324 325 553 645 652

Q-2:
#include<stdio.h>
void Div(int [],int,int,int*,int*);
void Qsort(int [],int,int,int*,int*);
void disp(int [],int);
int main()
{
    int t,n,i;
    printf("Enter the number of test cases:");
    scanf("%d",&t);
    while(t>0)
    {
        t--;
        printf("Enter size:");
        scanf("%d",&n);
        int arr[n],sw=0,cmp=0;
        printf("Enter elements:");
        for(i=0;i<n;i++)
        scanf("%d",&arr[i]);
        Qsort(arr,0,n-1,&sw,&inv);
        printf("Comparisons:%d\n",cmp);
        printf("Swaps:%d\n",sw);
        printf("Sorted Array:");
        disp(arr,n);
    }
    return 0;
}
int Div(int arr[],int low,int high,int *cmp,int *sw)
{
    int temp;
    int pivot=arr[high];
    int i=low-1;
    for(int j=low;j<high;j++)
    {
        (*cmp++);
        if(arr[j]<=pivot)
        {
            i++;
            temp=arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
            (*sw++);
        }
    }
    temp=arr[i+1];
    arr[i+1]=arr[high];
    arr[high]=temp;
    (*sw++);
    return i+1;
}
void Qsort(int arr[],int low,int high,int *cmp,int *sw)
{
    if(low<high)
    {
        int p=Div(arr,low,high,cmp,sw);
        Qsort(arr,low,p-1,cmp,sw);
        Qsort(arr,p+1,high,cmp,sw);
    }
}
void disp(int arr[],int n)
{
    for(int i=0;i<n;i++)
    printf("%d",arr[i]);
    printf("\n");
}

INPUT:
Enter the number of test cases:2
Enter size:8
Enter elements:23 65 21 76 46 89 45 32
Enter size:10
Enter elements:54 65 34 76 78 97 46 32 51 21

OUTPUT:
Comparisons:14
Swaps:10
Array after sorting:21 23 32 45 46 65 76 89
Comparisons:29
Swaps:21
Array after sorting:21 32 34 46 51 54 65 76 78 97


Q-3:
#include<stdio.h>
void Div(int [],int,int);
void Qsort(int [],int,int);
void Kth_element(int [],int);
int main()
{
    int t,n,i;
    printf("Enter the number of test cases:");
    scanf("%d",&t);
    while(t>0)
    {
        t--;
        printf("Enter size:");
        scanf("%d",&n);
        int arr[n];
        printf("Enter elements:");
        for(i=0;i<n;i++)
        scanf("%d",&arr[i]);
        Kth_element(arr,n);
    }
    return 0;
}
void Kth_element(int arr[],int n)
{
    int k;
    printf("Enter the Kth term:");
    scanf("%d",&k);
    if(k<n)
    {
        Qsort(arr,0,n_1);
        printf("The %d smallest element is:%d\n",k,arr[k-1]);
    }
    else if(k==n)
    {
        Qsort(arr,0,n-1);
        printf("The %d largest number is:%d\n",k,arr[k-1]);
    }
    else
    printf("Not present\n");
}
int Div(int arr[],int low,int high)
{
    int temp;
    int pivot=arr[high];
    int i=low-1;
    for(j=low;j<high;j++)
    {
        if(arr[j]<=pivot)
        {
            i++;
            temp=arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
        }
    }
    temp=arr[i+1];
    arr[i+1]=arr[high];
    arr[high]=temp;
    return i+1;
}
void Qsort(int arr[],int low,int high)
{
    if(low<high)
    {
        int p=Div(arr,low,high);
        Qsort(arr,low,p-1);
        Qsort(arr,p+1;high);
    }
}

INPUT:
Enter number of test cases:2
Enter size:8
Enter elements:123 656 54 765 344 514 765 34
Enter the Kth term:3
Enter size:10
Enter elements:43 64 13 78 864 346 786 456 21 19
Enter the Kth term:8

OUTPUT:
The 3 smallest Element is:123
The 8 smallest element is:78
