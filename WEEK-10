Q-1:
//Activity Selection
#include <bits/stdc++.h>
using namespace std;
void printMaxActivities(int s[], int f[], int n)
{
    int i, j,c=1;
    cout << "Following activities are selected: ";
    i = 0;
    cout << i << " ";
    for (j = 1; j < n; j++) 
    {
        if (s[j] >= f[i]) 
        {
            cout << j << " ";
            i = j;
            c++;
        }
    }
    cout<<"\nNo. of non-conflicting activities: "<<c;
}
int main()
{
    int s[20],f[20],n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>s[i];
    }
    for(int i=0;i<n;i++)
    {
        cin>>f[i];
    }
    printMaxActivities(s, f, n);
    return 0;
}

INPUT:
10
1 3 0 5 3 8 8 2 12
4 5 6 7 9 9 11 12 14 16

OUTPUT:
Following activities are selected: 0 3 6 9
No. of non.conflicting activites: 4

Q-2:
//Job Sequencing
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
#define T 15
struct Job 
{
    int taskId, deadline, profit;
};
void scheduleJobs(vector<Job> jobs)        
{
    int profit = 0;
    vector<int> slot(T, -1);
    sort(jobs.begin(), jobs.end(),
        [](Job &a, Job &b) 
        {
            return a.profit > b.profit;    
        });
    for (const Job &job: jobs)
    {
        for (int j = job.deadline - 1; j >= 0; j--)
        {
            if (j < T && slot[j] == -1)
            {
                slot[j] = job.taskId;
                profit += job.profit;
                break;
            }
        }
    }
 
    cout << "The scheduled jobs are: ";
    for (int i = 0; i < T; i++)
    {
        if (slot[i] != -1) {
            cout << slot[i] << " ";
        }
    }
    cout << "\nThe total profit earned is: " << profit;
}
int main()
{
    vector<Job> jobs =
    {
        {1, 9, 15}, {2, 2, 2}, {3, 5, 18}, {4, 7, 1}, {5, 4, 25},
        {6, 2, 20}, {7, 5, 8}, {8, 7, 10}, {9, 4, 12}, {10, 3, 5}
    };
    scheduleJobs(jobs);
    return 0;
}

OUTPUT:
The scheduled jobs are: 7 6 9 5 3 4 8 1
The total profit earned is: 109

Q-3:
