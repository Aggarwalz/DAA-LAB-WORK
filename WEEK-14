Q-1:
#include <iostream>
using namespace std;
int maxDivide(int a, int b)
{
    while (a % b == 0)
        a = a / b;
    return a;
}
int isUgly(int no)
{
    no = maxDivide(no, 2);
    no = maxDivide(no, 3);
    no = maxDivide(no, 5);
    return (no == 1) ? 1 : 0;
}
int getUglyNo(int n)
{
    int i = 1;
    int count = 1;
    while (n > count)
    {
        i++;
        if (isUgly(i))
            count++;
    }
    return i;
}
int main()
{
    int t,n,k;
    cout<<"Enter test cases: ";
    cin>>t;
    for(k=0;k<t;k++)
    {
        cout<<"Enter number: ";
        cin>>n;
        unsigned no = getUglyNo(n);
        cout << "Ugly no. is " << no;
        cout<<"\n";
    }
    return 0;
}

INPUT:
Enter test cases: 3
Enter number: 11
Enter number: 8
Enter number: 15

OUTPUT:
Ugly no. is:15
Ugly no. is:9
Ugly no. is:24

Q-2:
#include <bits/stdc++.h>
using namespace std;
class Graph 
{
    int V; 
    list<int>* adj;
    void DFSUtil(int v, vector<bool>& visited);
public:
    Graph(int V);
    void addEdge(int v, int w);
    int findMother();
};
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
void Graph::DFSUtil(int v, vector<bool>& visited)
{
    visited[v] = true;
    list<int>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
        if (!visited[*i])
            DFSUtil(*i, visited);
}
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); 
}
int Graph::findMother()
{
    vector<bool> visited(V, false);
    int v = 0;
    for (int i = 0; i < V; i++) 
    {
        if (visited[i] == false) 
        {
            DFSUtil(i, visited);
            v = i;
        }
    }
    fill(visited.begin(), visited.end(), false);
    DFSUtil(v, visited);
    for (int i = 0; i < V; i++)
        if (visited[i] == false)
            return -1;
    return v;
}
int main()
{
    Graph g(7);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(4, 1);
    g.addEdge(6, 4);
    g.addEdge(5, 6);
    g.addEdge(5, 2);
    g.addEdge(6, 0);
    cout << "Mother vertex is " << g.findMother();
    return 0;
}

OUPTUT:
Mother vertex is 5
